// Created by Xilong Yang on 2022-03-20.
//

#include "littledb.h"

#include <array>
#include <stdexcept>

namespace littledb{
namespace {
using std::array;

  // The plus operation defined on GF(2^8)
  Byte GfPlus(const Byte& a, const Byte& b) {
    return a^b;
  }

  // The multiple Operation defined on GF(2^8)
  Byte GfMultiple(Byte a, Byte b) {
    if (a == 0) {
      return 0;
    }
    if (a == 1) {
      return b;
    }
    if (a == 2) {
      // 0x80: 10000000
      if (b&0x80) {
        // 0x1b: 00011011
        b = (b<<1)^0x1b;
      } else {
        b <<= 1;
      }
      return b;
    }
    if (a > b) {
      std::swap(a, b);
    }
    if (a&0x01) {
      return GfPlus(GfMultiple(a - 1, b), b);
    }
    return GfMultiple(2, GfMultiple(a>>1, b));
  }


class State : public CodableInterface {
 public:
  explicit State(const Code& code = Code()) : value_() {
      if (code != Code()) {
        State::Decode(code);
      }
    }

    Code Encode() override {
      ByteString str(16, 0);
      for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
          str[i + j * 4] = value_[i][j];
        }
      }
      return Code(str);
    }

    void Decode(const Code& code) override {
      if (code.value().size() != 16) {
        throw DecodeError("S-Box can only be constructed from"
            "code of length 16");
      }
      for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
          value_[i][j] = code.value()[i + j * 4];
        }
      }
    }

    bool operator==(const State& state) const {
      return this->value_ == state.value_;
    }

    bool operator!=(const State& state) const {
      return this->value_ != state.value_;
    }

    array<Byte, 4>& operator[](int index) {
      return value_[index];
    }

    array<Byte, 4> operator[](int index) const {
      return value_[index];
    }

    State operator^(const State& state) const {
      State result;
      for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
          result[i][j] = value_[i][j]^state[i][j];
        }
      }
      return result;
    }

    void operator^=(const State& state) {
      for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
          value_[i][j] ^= state[i][j];
        }
      }
    }

    void SubBytes(bool forward = true) {
      for (auto &arr : value_) {
        for (auto &b : arr) {
          if (forward) {
            b = kForwardSBox[b/16][b%16];
          } else {
            b = kInverseSBox[b/16][b%16];
          }
        }
      }
    }

    void ShiftRows(bool forward = true) {
      auto tmp = value_;
      for (int i = 0; i < 4; ++i) {
        for (int j = 1; j < 4; ++j) {
          if (forward) {
            value_[i][j] = tmp[(i + j) % 4][j];
          } else {
            value_[i][j] = tmp[(i - j) % 4][j];
          }
        } // for j
      } // for i
    } // ShiftRows

  void MixColumns(bool forward = true) {
      auto origin_value= value_;
      for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
          Byte tmp = 0;
          for (int k = 0; k < 4; ++k) {
            Byte a = kForwardMatrix[i][k];
            if (!forward) {
              a = kInverseMatrix[i][k];
            }
            Byte b = origin_value[k][j];
            tmp = GfPlus(tmp, GfMultiple(a, b));
          }
          value_[i][j] = tmp;
        }
      }
    }


    State RoundKey() const {
      auto result = *this;
      result.value_[0] = value_[0];
      for (int i = 0; i < 4; ++i) {
        result.value_[0][i] ^= T(value_[3])[i];
      }

      for (int i = 1; i < 4; ++i) {
        result.value_[i] = result.value_[i - 1];
        for (int j = 0; j < 4; ++j) {
          result[i][j] ^= value_[i][j];
        }
      }
      result.round_ = round_ + 1;
      return result;
    }

   private:
    array<Byte, 4> T(array<Byte, 4> w) const {
      auto tmp = w[0];
      for (int i = 0; i < 3; ++i) {
        w[i] = w[i + 1];
      }
      w[3] = tmp;
      for (int i = 0; i < 4; ++i) {
        w[i] = kForwardSBox[w[i]/16][w[i]%16];
      }
      w[0] = GfPlus(w[0], kRcon[round_]);
      return w;
    }

    array<array<Byte, 4>, 4> value_;
    int round_ = 0;
    static const Byte kForwardSBox[16][16];
    static const Byte kInverseSBox[16][16];
    static const Byte kForwardMatrix[4][4];
    static const Byte kInverseMatrix[4][4];
    static const Byte kRcon[10];
  };

  const Byte State::kForwardSBox[16][16]{
      0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76
    , 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0
    , 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15
    , 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75
    , 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84
    , 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf
    , 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8
    , 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2
    , 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73
    , 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb
    , 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79
    , 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08
    , 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a
    , 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e
    , 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf
    , 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
  };

  const Byte State::kRcon[10] {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

  const Byte State::kInverseSBox[16][16] {
      0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb
    , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb
    , 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e
    , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25
    , 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92
    , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84
    , 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06
    , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b
    , 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73
    , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e
    , 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b
    , 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4
    , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f
    , 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef
    , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61
    , 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
  };

  const Byte State::kForwardMatrix[4][4] {
        2, 3, 1, 1
      , 1, 2, 3, 1
      , 1, 1, 2, 3
      , 3, 1, 1, 2
  };

  const Byte State::kInverseMatrix[4][4] {
        14, 11, 13, 9
      , 9, 14, 11, 13
      , 13, 9, 14, 11
      , 11, 13, 9, 14
  };

  template<unsigned int N>
  array<State, N> GenerateRoundKeys(const State& key) {
    array<State, N> result;
    result[0] = key.RoundKey();
    for (int i = 1; i < N; ++i) {
      result[i] = result[i - 1].RoundKey();
    }
    return result;
  }
}

  Code Aes128Encrypt(const Code& plaintext, const Code& key) {
    Code hash_key(Sha256(key).value().substr(0, 16));
    State key_state(hash_key);
    auto round_keys = GenerateRoundKeys<10>(key_state);

    Code padded_text(plaintext.value()
                     + ByteString ((16 - (plaintext.value().size() % 16))
                                       % 16, 0));

    ByteString cipher_str;
    for (int i = 0; i < padded_text.value().size(); i += 16) {
      Code current_text(padded_text.value().substr(i, 16));
      State text_state(current_text);
      text_state ^= key_state;
      for (int j = 0; j < 10; ++j) {
        text_state.SubBytes();
        text_state.ShiftRows();
        if (j < 9) {
          text_state.MixColumns();
        }
        text_state ^= round_keys[i];
      }
      cipher_str += text_state.Encode().value();
    }
    return Code(cipher_str);
  }

  Code Aes128Decrypt(const Code& ciphertext, const Code& key) {
    Code hash_key(Sha256(key).value().substr(0, 16));
    State key_state(hash_key);
    auto round_keys = GenerateRoundKeys<10>(key_state);
    if (ciphertext.value().size() % 16 != 0) {
      throw DecryptError("Ciphertext size can not be divide by 128bit.");
    }

    ByteString plant_str;
    for (int i = 0; i < ciphertext.value().size(); i += 16) {
      Code current_text(ciphertext.value().substr(i, 16));
      State text_state(current_text);
      text_state ^= round_keys[9];
      for (int j = 9; j >= 0; --j) {
        text_state.SubBytes(false);
        text_state.ShiftRows(false);
        if (j > 0) {
          text_state.MixColumns(false);
          text_state ^= round_keys[i - 1];
        } else {
          text_state ^= key_state;
        }
      }
      plant_str += text_state.Encode().value();
    }
    return Code(plant_str);
  }
}
